class StaticCheck(Visitor):

    def visitProgram(self,ctx:Program,o:object):
        o = [[]]
        for decl in ctx.decl:
            self.visit(decl, o)
        
    def visitVarDecl(self,ctx:VarDecl,o:object):
        if ctx.name in o[0]:
            raise RedeclaredVariable(ctx.name)
        o[0] += [ctx.name]

    def visitConstDecl(self,ctx:ConstDecl,o:object):
        if ctx.name in o[0]:
            raise RedeclaredConstant(ctx.name)
        o[0] += [ctx.name]
        
    # name:str,param:List[VarDecl],body:Tuple(List[Decl],List[Expr])
    def visitFuncDecl(self,ctx:FuncDecl,o:object):
        if ctx.name in o[0]:
            raise RedeclaredFunction(ctx.name)
        
        o[0] += [ctx.name]
        # for function scope
        i = [[]] + o
        for decl in ctx.param:
            self.visit(decl, i)
        for decl in ctx.body[0]:    # may encounter function decls
            self.visit(decl, i)
        
        # check exprs
        all_decls = [d for env in i for d in env]
        for exp in ctx.body[1]:
            self.visit(exp, all_decls)

    def visitId(self,ctx:Id,o:object):
        if ctx.name not in o:
            raise UndeclaredIdentifier(ctx.name)

        
    def visitIntType(self,ctx:IntType,o:object): pass

    def visitFloatType(self,ctx:FloatType,o:object): pass

    def visitIntLit(self,ctx:IntLit,o:object): pass
