class ASTGeneration(MPVisitor):

    def visitProgram(self,ctx:MPParser.ProgramContext):
        return Program(self.visit(ctx.exp()))

    def visitExp(self,ctx:MPParser.ExpContext):
        if ctx.getChildCount() == 3:
            return Binary(ctx.ASSIGN().getText(), 
                self.visit(ctx.term()), 
                self.visit(ctx.exp()))
        else:
            return self.visit(ctx.term())

    def visitTerm(self,ctx:MPParser.TermContext): 
        if ctx.getChildCount() == 3:
            return Binary(ctx.COMPARE().getText(), 
                self.visit(ctx.factor(0)), 
                self.visit(ctx.factor(1)))
        else:
            return self.visit(ctx.factor(0))

    def visitFactor(self,ctx:MPParser.FactorContext):
        if ctx.getChildCount() == 3:
            return Binary(ctx.ANDOR().getText(), 
                self.visit(ctx.factor()), 
                self.visit(ctx.operand()))
        else:
            return self.visit(ctx.operand()) 

    def visitOperand(self,ctx:MPParser.OperandContext):
        if ctx.getChildCount() == 3:
            return self.visit(ctx.exp())
        elif ctx.ID():
            return Id(ctx.ID().getText())
        elif ctx.INTLIT():
            return IntLiteral(int(ctx.INTLIT().getText()))
        elif ctx.BOOLIT():
            return BooleanLiteral(bool(ctx.BOOLIT().getText()))