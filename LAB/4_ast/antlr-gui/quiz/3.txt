class ASTGeneration(MPVisitor):

    def visitProgram(self,ctx:MPParser.ProgramContext):
        return str(Program(self.visit(ctx.vardecls())))
        
    def visitVardecls(self,ctx:MPParser.VardeclsContext):
        return self.visit(ctx.vardecl()) + self.visit(ctx.vardecltail())

    def visitVardecltail(self,ctx:MPParser.VardecltailContext): 
        return self.visit(ctx.vardecl()) + self.visit(ctx.vardecltail()) if ctx.getChildCount() == 2 else []

    def visitVardecl(self,ctx:MPParser.VardeclContext): 
        typ = self.visit(ctx.mptype())
        ids = self.visit(ctx.ids())
    #    return [VarDecl(ident, typ) for ident in ids]
        return list(map(lambda x: VarDecl(x, typ), ids))

    def visitMptype(self,ctx:MPParser.MptypeContext):
        return IntType() if ctx.INTTYPE() else FloatType()

    def visitIds(self,ctx:MPParser.IdsContext):
        return [Id(ctx.ID().getText())] + self.visit(ctx.ids()) if ctx.getChildCount() == 3 else [Id(ctx.ID().getText())]