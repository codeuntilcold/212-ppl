class ASTGenerator(CSELVisitor):

    # Visit a parse tree produced by CSELParser#program.
    def visitProgram(self, ctx:CSELParser.ProgramContext):
        return Program(self.visit(ctx.decl(0)))

    # Visit a parse tree produced by CSELParser#cseltype.
    def visitCseltype(self, ctx:CSELParser.CseltypeContext):
        if ctx.INT(): return IntType()
        elif ctx.FLOAT(): return FloatType()
        elif ctx.BOOLEAN(): return BooleanType()

    # Visit a parse tree produced by CSELParser#decl.
    def visitDecl(self, ctx:CSELParser.DeclContext):
        return self.visit(ctx.getChild(0)) + self.visit(ctx.decltail())

    # Visit a parse tree produced by CSELParser#decltail.
    def visitDecltail(self, ctx:CSELParser.DecltailContext):
        return self.visit(ctx.getChild(0)) + self.visit(ctx.decltail()) if ctx.getChildCount() == 2 else []

    # Visit a parse tree produced by CSELParser#vardecl.
    def visitVardecl(self, ctx:CSELParser.VardeclContext):
        return self.visit(ctx.single_vardecls())

    # Visit a parse tree produced by CSELParser#single_vardecls.
    def visitSingle_vardecls(self, ctx:CSELParser.Single_vardeclsContext):
        return self.visit(ctx.single_vardecl()) + self.visit(ctx.single_vardecltail())

    # Visit a parse tree produced by CSELParser#single_vardecl.
    def visitSingle_vardecl(self, ctx:CSELParser.Single_vardeclContext):
        return [VarDecl(
            Id(ctx.ID().getText()),
            self.visit(ctx.cseltype())
        )]

    # Visit a parse tree produced by CSELParser#single_vardecltail.
    def visitSingle_vardecltail(self, ctx:CSELParser.Single_vardecltailContext):
        return self.visit(ctx.single_vardecl()) + self.visit(ctx.single_vardecltail()) if ctx.getChildCount() == 3 else []

    # Visit a parse tree produced by CSELParser#constdecl.
    def visitConstdecl(self, ctx:CSELParser.ConstdeclContext):
        return self.visit(ctx.single_constdecl())

    # Visit a parse tree produced by CSELParser#single_constdecl.
    def visitSingle_constdecl(self, ctx:CSELParser.Single_constdeclContext):
        return [ConstDecl(
            Id(ctx.ID().getText()),
            self.visit(ctx.cseltype()),
            self.visit(ctx.expr())
        )]

    # Visit a parse tree produced by CSELParser#expr.
    def visitExpr(self, ctx:CSELParser.ExprContext):
        if ctx.INTLIT(): return IntLit(int(ctx.INTLIT().getText()))
        elif ctx.FLOATLIT(): return FloatLit(float(ctx.FLOATLIT().getText()))
        elif ctx.BOOLEANLIT(): return BooleanLit(bool(ctx.BOOLEANLIT().getText()))

    # Visit a parse tree produced by CSELParser#funcdecl.
    def visitFuncdecl(self, ctx:CSELParser.FuncdeclContext):
        return [FuncDecl(
            Id(ctx.ID().getText()),
            self.visit(ctx.paramlist())
        )]

    # Visit a parse tree produced by CSELParser#paramlist.
    def visitParamlist(self, ctx:CSELParser.ParamlistContext):
        return self.visit(ctx.single_vardecls()) if ctx.getChildCount() == 1 else []